data[1,]
data[1,4]
sume(data[,4])
sum(data[,4])
with?
library(datasets)
data(mtcars)
?mtcars
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
help(with)
?matcars
matcars?
mean(mtcars$mpg)
?mtcars
mean(mtcars[which(mtcars$cyl == 4), ])
mean(mtcars[which(mtcars$cyl == 4), 2])
mean(mtcars[which(mtcars$cyl == 4), 4])
mean(mtcars[which(mtcars$cyl == 8), 4])
mean(mtcars[which(mtcars$cyl == 8), 4])-mean(mtcars[which(mtcars$cyl == 4), 4])
set.seed(1)
rpois(5,2)
x <- 4
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[1]]
x[1]
x <- 1:4
x + 2
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x < 10] <- 4
x
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
fileName <- ".\\hw1_data.csv"
qData <- read.csv(fileName)
## Q 11
col(qData)
dim(qData)
names(qData)
airquality <- read.csv(fileName)
## Q 11
names(airquality)
airquality[1:2,]
dim(airquality)
airquality(152:152,)
airquality[152:152,]
airquality[152:153,]
airquality[47, airquality$Ozone]
airquality[47, $Ozone]
airquality[47, Ozone]
airquality$Ozone[47]
airquality[47,]
x <- count(airquality$Ozone)
x <- sum(is.na(airquality$Ozone))
x
bad <- is:na(airquality$Ozone)
bad <- is.na(airquality$Ozone)
length(airquality$Ozone[!bad])
116+37
mean(airquality$Ozone[!bad])
x <- airquality[which(Ozone >31 & Temp > 90), ]
x <- airquality[which(airqualit$Ozone >31 & airqualit$Temp > 90), ]
x <- airquality[which(airquality$Ozone >31 & airquality$Temp > 90), ]
x
mean(x$Solar.R)
x <- airquality[which(airquality$Ozone >31 & airquality$Temp > 90), ]$Solar.R
x
mean(airquality[which(airquality$Ozone >31 & airquality$Temp > 90), ]$Solar.R)
mean(airquality[which(airquality$Month == 6),]$Temp)
max(airquality[which(airquality$Month == 5),]$Temp)
max(airquality[which(airquality$Month == 5),]$Ozone)
max(airquality[which(airquality$Month == 5),]$Ozone, na.rm = FALSE)
max(airquality[which(airquality$Month == 5),]$Ozone, na.rm = TRUE)
## Q4
x <- 4
class(x)
## Q5
x <- c(4, "a", TRUE)
class(x)
## Q6
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
## Q8
x <- list(2, "a", "b", TRUE)
x[1]
x[[1]]
## Q9
x <- 1:4
x + 2
## Q10
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
## Load dataset provided for the Quiz
fileName <- ".\\hw1_data.csv"
airquality <- read.csv(fileName)
## Q11
names(airquality)
## Q12
airquality[1:2,]
## Q13
dim(airquality)
airquality[152:153,]
## Q15
airquality$Ozone[47]
airquality[47]$Ozone
airquality[47,]$Ozone
sum(is.na(airquality$Ozone))
## Q17
bad <- is.na(airquality$Ozone)
mean(airquality$Ozone[!bad])
mean(airquality$Solar.R[which(airquality$Ozone >31 & airquality$Temp > 90), ])
## Q19
mean(airquality[which(airquality$Month == 6),]$Temp)
## Q20
max(airquality[which(airquality$Month == 5),]$Ozone, na.rm = TRUE)
x <- 4L
class(x)
x <- c(4, TRUE)
class(x)
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] <- 4
## Load dataset provided for the Quiz
x
airquality[1:2,]
dim(airquality)
## Q14
airquality[152:153,]
airquality[47,]$Ozone
sum(is.na(airquality$Ozone))
bad <- is.na(airquality$Ozone)
mean(airquality$Ozone[!bad])
mean(airquality[which(airquality$Ozone >31 & airquality$Temp > 90), ]$Solar.R)
mean(airquality[which(airquality$Month == 6),]$Temp)
max(airquality[which(airquality$Month == 5),]$Ozone, na.rm = TRUE)
mean(airquality[Month == 6,]$Temp)
mean(airquality[,Month == 6]$Temp)
mean(airquality[, $Month == 6]$Temp)
mean(airquality[, airquality$Month == 6]$Temp)
mean(airquality[airquality$Month == 6]$Temp)
which(airquality$
)
mean(airquality[which(airquality$Month == 6),]$Temp)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
submit()
submit <- local({
getOutput <- function(sid) {
## JUST FOR TESTING
## sid <- sub("-dev", "", sid, fixed = TRUE)
if(sid == "pollutantmean-1") {
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
}
else if(sid == "pollutantmean-2") {
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 70:72)
}
else if(sid == "pollutantmean-3") {
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 34)
}
else if(sid == "pollutantmean-4") {
source("pollutantmean.R")
pollutantmean("specdata", "nitrate")
}
else if(sid == "complete-1") {
source("complete.R")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
paste(cc$nobs, collapse = "\n")
}
else if(sid == "complete-2") {
source("complete.R")
cc <- complete("specdata", 54)
cc$nobs
}
else if(sid == "complete-3") {
source("complete.R")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
paste(cc[use, "nobs"], collapse = "\n")
}
else if(sid == "corr-1") {
source("corr.R")
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
paste(out, collapse = "\n")
}
else if(sid == "corr-2") {
source("corr.R")
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
paste(out, collapse = "\n")
}
else if(sid == "corr-3") {
source("corr.R")
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
paste(c(n, round(cr, 4)), collapse = "\n")
}
else {
stop("invalid part number")
}
}
partPrompt <- function() {
partlist <- list("pollutantmean-1" = "'pollutantmean' part 1",
"pollutantmean-2" = "'pollutantmean' part 2",
"pollutantmean-3" = "'pollutantmean' part 3",
"pollutantmean-4" = "'pollutantmean' part 4",
"complete-1" = "'complete' part 1",
"complete-2" = "'complete' part 2",
"complete-3" = "'complete' part 3",
"corr-1" = "'corr' part 1",
"corr-2" = "'corr' part 2",
"corr-3" = "'corr' part 3"
)
pretty_out("Which part are you submitting?")
part <- select.list(partlist, graphics=FALSE)
names(part)
}
getChallenge <- function(email, challenge.url) {
params <- list(email_address = email,
response_encoding = "delim")
result <- getForm(challenge.url, .params = params)
s <- strsplit(result, "|", fixed = TRUE)[[1]]
list(ch.key = s[5], state = s[7])
}
challengeResponse <- function(password, ch.key) {
x <- paste(ch.key, password, sep = "")
digest(x, algo = "sha1", serialize = FALSE)
}
submitSolution <- function(email, ch.resp, sid, output, signature, submit.url,
src = "", http.version = NULL) {
output <- as.character(base64(output))
src <- as.character(base64(src))
params <- list(assignment_part_sid = sid,
email_address = email,
submission = output,
submission_aux = src,
challenge_response = ch.resp,
state = signature)
params <- lapply(params, URLencode)
result <- postForm(submit.url, .params = params)
s <- strsplit(result, "\\r\\n")[[1]]
tail(s, 1)
}
get_courseid <- function() {
pretty_out("The first item I need is your Course ID. For example, if the",
"homepage for your Coursera course was",
"'https://class.coursera.org/rprog-001',",
"then your course ID would be 'rprog-001' (without the quotes).", skip_after=TRUE)
repeat {
courseid <- readline("Course ID: ")
## Remove quotes if there are any
courseid <- gsub("\'|\"", "", courseid)
## Set up test cases
is_url <- str_detect(courseid, "www[.]|http:|https:")
is_numbers <- str_detect(courseid, "^[0-9]+$")
is_example <- str_detect(courseid, fixed("rprog-001"))
## Check if courseid is none of the bad things
if(!any(is_url, is_numbers, is_example)){
break
## courseid is one of the bad things
} else {
## Check if courseid is a url
if(is_url) {
pretty_out("It looks like you entered a web address, which is not what I'm",
"looking for.")
}
## Check if courseid is all numbers
if(is_numbers) {
pretty_out("It looks like you entered a numeric ID, which is not what I'm",
"looking for.")
}
## Check if the user stole the example courseid
if(is_example) {
pretty_out("It looks like you entered the Course ID that I used as an",
"example, which is not what I'm looking for.")
}
}
pretty_out("Instead, I need your Course ID, which is the last",
"part of the web address for your Coursera course.",
"For example, if the homepage for your Coursera course was",
"'https://class.coursera.org/rprog-001',",
"then your course ID would be 'rprog-001' (without the quotes).",
skip_after=TRUE)
}
courseid
}
pretty_out <- function(..., skip_before=TRUE, skip_after=FALSE) {
wrapped <- strwrap(str_c(..., sep = " "),
width = getOption("width") - 2)
mes <- str_c("| ", wrapped, collapse = "\n")
if(skip_before) mes <- paste0("\n", mes)
if(skip_after) mes <- paste0(mes, "\n")
message(mes)
}
checkPkgs <- function() {
pkg.inst <- installed.packages()
pkgs <- c("RCurl", "digest", "stringr")
have.pkg <- pkgs %in% rownames(pkg.inst)
if(any(!have.pkg)) {
message("\nSome packages need to be installed.\n")
r <- readline("Install necessary packages [y/n]? ")
if(tolower(r) == "y") {
need <- pkgs[!have.pkg]
message("\nInstalling packages ",
paste(need, collapse = ", "))
install.packages(need)
}
}
}
loginPrompt <- function() {
courseid <- get_courseid()
email <- readline("Submission login (email): ")
passwd <- readline("Submission  password: ")
r <- list(courseid = courseid, email = email, passwd = passwd)
assign(".CourseraLogin", r, globalenv())
invisible(r)
}
function(manual = FALSE, resetLogin = FALSE) {
checkPkgs()
suppressPackageStartupMessages(library(RCurl))
library(digest)
library(stringr)
readline("\nPress Enter to continue...")
if(!manual) {
confirmed <- FALSE
need2fix <- FALSE
while(!confirmed) {
if(exists(".CourseraLogin") && !resetLogin && !need2fix)
cred <- get(".CourseraLogin")
else
cred <- loginPrompt()
if(!is.list(cred) || !(names(cred) %in% c("email", "passwd", "courseid")))
stop("problem with login/password")
courseid <- cred$courseid
email <- cred$email
password <- cred$passwd
pretty_out("Is the following information correct?",
skip_after=TRUE)
message("Course ID: ", courseid,
"\nSubmission login (email): ", email,
"\nSubmission password: ", password)
yn <- c("Yes, go ahead!",
"No, I need to change something.")
confirmed <- identical(select.list(yn, graphics=FALSE), yn[1])
if(!confirmed) need2fix <- TRUE
}
## Set urls based on confirmed courseid
challenge.url <- paste("http://class.coursera.org", courseid,
"assignment/challenge", sep = "/")
submit.url <- paste("http://class.coursera.org", courseid,
"assignment/submit", sep = "/")
}
## Prompt Submission Part
sid <- partPrompt()
## Get output
output <- getOutput(sid)
if(!manual) {
## Get challenge
ch <- try(getChallenge(email, challenge.url), silent=TRUE)
## Check if url is valid, i.e. challenge received
ch_ok <- !is(ch, "try-error") && exists("ch.key", ch) && !is.na(ch$ch.key)
if(!ch_ok) {
stop("Either the course ID you entered is not valid or your course site ",
"is unreachable at this time. If you'd like to submit manually, you ",
"can run submit(manual=TRUE).")
}
## Attempt submission with challenge
ch.resp <- challengeResponse(password, ch$ch.key)
results <- submitSolution(email, ch.resp, sid, output, ch$state,
submit.url = submit.url)
if(!length(results))
results <- "Incorrect!"
cat("Result: ", results, "\n")
}
else {
outfile <- paste(sid, "output.txt", sep = "-")
writeLines(as.character(output), outfile)
cat(sprintf("Please upload the file '%s' to Coursera\n",
outfile))
}
invisible()
}
})
submit()
Edu <- read.csv(eduFile)
gdpColNames = c("Country","Ranking","X1","Economy","US Dollars","X2","X3","X4","X5","X6")
gdpColClass = c("character","integer","NULL","character","character","NULL","NULL","NULL","NULL","NULL")
GDP <- read.csv(gdpFile, sep = ",", header = FALSE, skip = 5, nrows=228, col.names = gdpColNames, blank.lines.skip = TRUE)
gdpFile <- ".\\GDP.csv"
eduFile <- ".\\Edu.csv"
if(!file.exists(gdpFile) | !file.exists(eduFile)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileURL, destfile = gdpFile)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileURL, destfile = eduFile)
dateDownloaded <-date()
}
Edu <- read.csv(eduFile)
gdpColNames = c("Country","Ranking","X1","Economy","US Dollars","X2","X3","X4","X5","X6")
gdpColClass = c("character","integer","NULL","character","character","NULL","NULL","NULL","NULL","NULL")
GDP <- read.csv(gdpFile, sep = ",", header = FALSE, skip = 5, nrows=228, col.names = gdpColNames, blank.lines.skip = TRUE)
countryMatch <- match(Edu$CountryCode, GDP$Country)
sum(!is.na(countryMatch))
countryMatch <- match(Edu$CountryCode, GDP[which(GDP$Ranking != ""),]$Country)
sum(!is.na(countryMatch))
order(GDP$Ranking, decreasing = FALSE)
head(GDP)
GDP[order(GDP$Ranking, decreasing = FALSE)]
GDP[order(GDP$Ranking, decreasing = FALSE),]
GDP[order(GDP$Ranking, decreasing = TRUE),]
head(GDP)
GDP[order(GDP$Ranking, decreasing = TRUE),13]
head(GDP[order(GDP$Ranking, decreasing = TRUE),],n=13)
sum(!is.na(countryMatch))
head(GDP[order(GDP$Ranking, decreasing = TRUE),],n=13)
setwd("C:\\Users\\jolindqv\\OneDrive\\Microsoft\\Studier\\Machine Learning\\Coursera\\John Hopkins\\3 Clean Data\\Project\\CleanData\\")
# Import data
testFile <- ".\\UCI HAR Dataset\\test\\X_test.txt"
testLFile <- ".\\UCI HAR Dataset\\test\\y_test.txt"
testSFile <- ".\\UCI HAR Dataset\\test\\subject_test.txt"
trainFile <- ".\\UCI HAR Dataset\\train\\X_train.txt"
trainLFile <- ".\\UCI HAR Dataset\\train\\y_train.txt"
trainSFile <- ".\\UCI HAR Dataset\\train\\subject_train.txt"
featuresFile <- ".\\UCI HAR Dataset\\features.txt"
activityFile <- ".\\UCI HAR Dataset\\activity_labels.txt"
{stopifnot(file.exists(testFile) &
file.exists(testLFile) &
file.exists(testSFile) &
file.exists(trainFile) &
file.exists(trainLFile) &
file.exists(trainSFile) &
file.exists(featuresFile) &
file.exists(activityFile) )}
testData <- read.table(testFile)
testLData <- read.table(testLFile)
testSData <- read.table(testSFile)
trainData <- read.table(trainFile)
trainLData <- read.table(trainLFile)
trainSData <- read.table(trainSFile)
featuresData <- read.table(featuresFile)
activityData <- read.table(activityFile)
# Merge training and test sets
mergedData <- rbind(testData, trainData)
mergedLData <- rbind(testLData, trainLData)
mergedSData <- rbind(testSData, trainSData)
#testData <- NULL
#testLData <- NULL
#testSData <- NULL
#trainData <- NULL
#trainLData <- NULL
#trainSData <- NULL
# Add appropriate column names
colnames(mergedData) <- featuresData$V2
# Extract only measurements on the mean and standard deviation
isMeanOrStd <- function(x) {
xStr <- as.character(x)
variable1 <- substr(xStr, nchar(xStr)-7, nchar(xStr)-4)
variable2 <- substr(xStr, nchar(xStr)-4, nchar(xStr)-1)
variable1 == "mean" | variable1 == "-std" | variable2 == "Mean"
}
columnsMeanAndStd <- featuresData[isMeanOrStd(featuresData$V2),]
featuresMeanAndStd <- mergedData[,columnsMeanAndStd$V1]
featuresData <- NULL
mergedData <- NULL
columnsMeanAndStd <- NULL
